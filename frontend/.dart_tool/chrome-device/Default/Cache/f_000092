define(['dart_sdk', 'packages/more/src/collection/bitlist.dart'], (function load__packages__more__src__char_matcher__whitespace_dart(dart_sdk, packages__more__src__collection__bitlist$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const bitlist = packages__more__src__collection__bitlist$46dart.src__collection__bitlist;
  var whitespace = Object.create(dart.library);
  var upper_case = Object.create(dart.library);
  var pattern$ = Object.create(dart.library);
  var negate = Object.create(dart.library);
  var lower_case = Object.create(dart.library);
  var letter_or_digit = Object.create(dart.library);
  var letter = Object.create(dart.library);
  var disjunctive = Object.create(dart.library);
  var digit = Object.create(dart.library);
  var single = Object.create(dart.library);
  var ranges$ = Object.create(dart.library);
  var range = Object.create(dart.library);
  var lookup = Object.create(dart.library);
  var optimize = Object.create(dart.library);
  var char_set = Object.create(dart.library);
  var ascii = Object.create(dart.library);
  var none = Object.create(dart.library);
  var any = Object.create(dart.library);
  var char_matcher = Object.create(dart.library);
  var $addAll = dartx.addAll;
  var $codeUnits = dartx.codeUnits;
  var $every = dartx.every;
  var $any = dartx.any;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $where = dartx.where;
  var $add = dartx.add;
  var $expand = dartx.expand;
  var $substring = dartx.substring;
  var $startsWith = dartx.startsWith;
  var $isNotEmpty = dartx.isNotEmpty;
  var $codeUnitAt = dartx.codeUnitAt;
  var $rightShift = dartx['>>'];
  var $sort = dartx.sort;
  var $isEmpty = dartx.isEmpty;
  var $last = dartx.last;
  var $_set = dartx._set;
  var $fold = dartx.fold;
  var $first = dartx.first;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $round = dartx.round;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    AnyCharMatcherL: () => (T.AnyCharMatcherL = dart.constFn(dart.legacy(any.AnyCharMatcher)))(),
    NoneCharMatcherL: () => (T.NoneCharMatcherL = dart.constFn(dart.legacy(none.NoneCharMatcher)))(),
    DisjunctiveCharMatcherL: () => (T.DisjunctiveCharMatcherL = dart.constFn(dart.legacy(disjunctive.DisjunctiveCharMatcher)))(),
    CharMatcherL: () => (T.CharMatcherL = dart.constFn(dart.legacy(char_matcher.CharMatcher)))(),
    JSArrayOfCharMatcherL: () => (T.JSArrayOfCharMatcherL = dart.constFn(_interceptors.JSArray$(T.CharMatcherL())))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    JSArrayOfintL: () => (T.JSArrayOfintL = dart.constFn(_interceptors.JSArray$(T.intL())))(),
    ListOfintL: () => (T.ListOfintL = dart.constFn(core.List$(T.intL())))(),
    ListLOfintL: () => (T.ListLOfintL = dart.constFn(dart.legacy(T.ListOfintL())))(),
    intLToListLOfintL: () => (T.intLToListLOfintL = dart.constFn(dart.fnType(T.ListLOfintL(), [T.intL()])))(),
    RangeCharMatcherL: () => (T.RangeCharMatcherL = dart.constFn(dart.legacy(range.RangeCharMatcher)))(),
    JSArrayOfRangeCharMatcherL: () => (T.JSArrayOfRangeCharMatcherL = dart.constFn(_interceptors.JSArray$(T.RangeCharMatcherL())))(),
    ListOfCharMatcherL: () => (T.ListOfCharMatcherL = dart.constFn(core.List$(T.CharMatcherL())))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    CharMatcherLToboolL: () => (T.CharMatcherLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.CharMatcherL()])))(),
    ListOfRangeCharMatcherL: () => (T.ListOfRangeCharMatcherL = dart.constFn(core.List$(T.RangeCharMatcherL())))(),
    RangeCharMatcherLAndRangeCharMatcherLTointL: () => (T.RangeCharMatcherLAndRangeCharMatcherLTointL = dart.constFn(dart.fnType(T.intL(), [T.RangeCharMatcherL(), T.RangeCharMatcherL()])))(),
    dynamicAndRangeCharMatcherLTodynamic: () => (T.dynamicAndRangeCharMatcherLTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic, T.RangeCharMatcherL()])))(),
    RangeCharMatcherLTointL: () => (T.RangeCharMatcherLTointL = dart.constFn(dart.fnType(T.intL(), [T.RangeCharMatcherL()])))(),
    intLToRangeCharMatcherL: () => (T.intLToRangeCharMatcherL = dart.constFn(dart.fnType(T.RangeCharMatcherL(), [T.intL()])))(),
    numL: () => (T.numL = dart.constFn(dart.legacy(core.num)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: any.AnyCharMatcher.prototype
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: none.NoneCharMatcher.prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ascii.AsciiCharMatcher.prototype
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: letter.LetterCharMatcher.prototype
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: upper_case.UpperCaseLetterCharMatcher.prototype
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: lower_case.LowerCaseLetterCharMatcher.prototype
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: letter_or_digit.LetterOrDigitCharMatcher.prototype
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: digit.DigitCharMatcher.prototype
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: whitespace.WhitespaceCharMatcher.prototype
      });
    }
  }, false);
  var C = Array(9).fill(void 0);
  var I = [
    "package:more/char_matcher.dart",
    "package:more/src/char_matcher/whitespace.dart",
    "package:more/src/char_matcher/upper_case.dart",
    "package:more/src/char_matcher/negate.dart",
    "package:more/src/char_matcher/lower_case.dart",
    "package:more/src/char_matcher/letter_or_digit.dart",
    "package:more/src/char_matcher/letter.dart",
    "package:more/src/char_matcher/disjunctive.dart",
    "package:more/src/char_matcher/digit.dart",
    "package:more/src/char_matcher/single.dart",
    "package:more/src/char_matcher/ranges.dart",
    "package:more/src/char_matcher/range.dart",
    "package:more/src/char_matcher/lookup.dart",
    "package:more/src/char_matcher/ascii.dart",
    "package:more/src/char_matcher/none.dart",
    "package:more/src/char_matcher/any.dart"
  ];
  char_matcher.CharMatcher = class CharMatcher extends core.Object {
    static any() {
      return C[0] || CT.C0;
    }
    static none() {
      return C[1] || CT.C1;
    }
    static isChar(character) {
      return new single.SingleCharMatcher.new(char_matcher._toCharCode(character));
    }
    static inRange(start, stop) {
      return new range.RangeCharMatcher.new(char_matcher._toCharCode(start), char_matcher._toCharCode(stop));
    }
    static charSet(chars) {
      return char_set.fromCharSet(chars);
    }
    static pattern(pattern) {
      return pattern$.fromPattern(pattern);
    }
    static ascii() {
      return C[2] || CT.C2;
    }
    static letter() {
      return C[3] || CT.C3;
    }
    static upperCaseLetter() {
      return C[4] || CT.C4;
    }
    static lowerCaseLetter() {
      return C[5] || CT.C5;
    }
    static letterOrDigit() {
      return C[6] || CT.C6;
    }
    static digit() {
      return C[7] || CT.C7;
    }
    static whitespace() {
      return C[8] || CT.C8;
    }
    ['~']() {
      return new negate.NegateCharMatcher.new(this);
    }
    ['|'](other) {
      if (T.AnyCharMatcherL().is(other)) {
        return other;
      } else if (T.NoneCharMatcherL().is(other)) {
        return this;
      } else if (T.DisjunctiveCharMatcherL().is(other)) {
        return disjunctive.DisjunctiveCharMatcher.new((() => {
          let t0 = T.JSArrayOfCharMatcherL().of([this]);
          t0[$addAll](other.matchers);
          return t0;
        })());
      } else {
        return disjunctive.DisjunctiveCharMatcher.new(T.JSArrayOfCharMatcherL().of([this, other]));
      }
    }
    everyOf(sequence) {
      return sequence[$codeUnits][$every](dart.bind(this, 'match'));
    }
    anyOf(sequence) {
      return sequence[$codeUnits][$any](dart.bind(this, 'match'));
    }
    firstIndexIn(sequence, start = 0) {
      let codeUnits = sequence[$codeUnits];
      for (let i = start; dart.notNull(i) < dart.notNull(codeUnits[$length]); i = dart.notNull(i) + 1) {
        if (dart.test(this.match(codeUnits[$_get](i)))) {
          return i;
        }
      }
      return -1;
    }
    lastIndexIn(sequence, start = null) {
      let codeUnits = sequence[$codeUnits];
      start == null ? start = dart.notNull(codeUnits[$length]) - 1 : null;
      for (let i = start; dart.notNull(i) >= 0; i = dart.notNull(i) - 1) {
        if (dart.test(this.match(codeUnits[$_get](i)))) {
          return i;
        }
      }
      return -1;
    }
    countIn(sequence) {
      return sequence[$codeUnits][$where](dart.bind(this, 'match'))[$length];
    }
    collapseFrom(sequence, replacement) {
      let i = 0;
      let list = T.JSArrayOfintL().of([]);
      let codeUnits = sequence[$codeUnits];
      let replacementCodes = replacement[$codeUnits];
      while (i < dart.notNull(codeUnits[$length])) {
        let codeUnit = codeUnits[$_get](i);
        if (dart.test(this.match(codeUnit))) {
          do {
            i = i + 1;
          } while (i < dart.notNull(codeUnits[$length]) && dart.test(this.match(codeUnits[$_get](i))));
          list[$addAll](replacementCodes);
        } else {
          list[$add](codeUnit);
          i = i + 1;
        }
      }
      return core.String.fromCharCodes(list);
    }
    replaceFrom(sequence, replacement) {
      let replacementCodes = replacement[$codeUnits];
      return core.String.fromCharCodes(sequence[$codeUnits][$expand](T.intL(), dart.fn(value => dart.test(this.match(value)) ? replacementCodes : T.JSArrayOfintL().of([value]), T.intLToListLOfintL())));
    }
    removeFrom(sequence) {
      return this['~']().retainFrom(sequence);
    }
    retainFrom(sequence) {
      return core.String.fromCharCodes(sequence[$codeUnits][$where](dart.bind(this, 'match')));
    }
    trimFrom(sequence) {
      let codeUnits = sequence[$codeUnits];
      let left = 0;
      let right = dart.notNull(codeUnits[$length]) - 1;
      while (left <= right && dart.test(this.match(codeUnits[$_get](left)))) {
        left = left + 1;
      }
      while (left <= right && dart.test(this.match(codeUnits[$_get](right)))) {
        right = right - 1;
      }
      return sequence[$substring](left, right + 1);
    }
    trimLeadingFrom(sequence) {
      let codeUnits = sequence[$codeUnits];
      let left = 0;
      let right = dart.notNull(codeUnits[$length]) - 1;
      while (left <= right && dart.test(this.match(codeUnits[$_get](left)))) {
        left = left + 1;
      }
      return sequence[$substring](left, right + 1);
    }
    trimTailingFrom(sequence) {
      let codeUnits = sequence[$codeUnits];
      let right = dart.notNull(codeUnits[$length]) - 1;
      while (0 <= right && dart.test(this.match(codeUnits[$_get](right)))) {
        right = right - 1;
      }
      return sequence[$substring](0, right + 1);
    }
  };
  (char_matcher.CharMatcher.new = function() {
    ;
  }).prototype = char_matcher.CharMatcher.prototype;
  dart.addTypeTests(char_matcher.CharMatcher);
  dart.addTypeCaches(char_matcher.CharMatcher);
  dart.setMethodSignature(char_matcher.CharMatcher, () => ({
    __proto__: dart.getMethods(char_matcher.CharMatcher.__proto__),
    '~': dart.fnType(dart.legacy(char_matcher.CharMatcher), []),
    '|': dart.fnType(dart.legacy(char_matcher.CharMatcher), [dart.legacy(char_matcher.CharMatcher)]),
    everyOf: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String)]),
    anyOf: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String)]),
    firstIndexIn: dart.fnType(dart.legacy(core.int), [dart.legacy(core.String)], [dart.legacy(core.int)]),
    lastIndexIn: dart.fnType(dart.legacy(core.int), [dart.legacy(core.String)], [dart.legacy(core.int)]),
    countIn: dart.fnType(dart.legacy(core.int), [dart.legacy(core.String)]),
    collapseFrom: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String), dart.legacy(core.String)]),
    replaceFrom: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String), dart.legacy(core.String)]),
    removeFrom: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    retainFrom: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    trimFrom: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    trimLeadingFrom: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    trimTailingFrom: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)])
  }));
  dart.setLibraryUri(char_matcher.CharMatcher, I[0]);
  whitespace.WhitespaceCharMatcher = class WhitespaceCharMatcher extends char_matcher.CharMatcher {
    match(value) {
      if (dart.notNull(value) < 256) {
        switch (value) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
          {
            return true;
          }
          default:
          {
            return false;
          }
        }
      } else {
        switch (value) {
          case 5760:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
          {
            return true;
          }
          default:
          {
            return false;
          }
        }
      }
    }
  };
  (whitespace.WhitespaceCharMatcher.new = function() {
    whitespace.WhitespaceCharMatcher.__proto__.new.call(this);
    ;
  }).prototype = whitespace.WhitespaceCharMatcher.prototype;
  dart.addTypeTests(whitespace.WhitespaceCharMatcher);
  dart.addTypeCaches(whitespace.WhitespaceCharMatcher);
  dart.setMethodSignature(whitespace.WhitespaceCharMatcher, () => ({
    __proto__: dart.getMethods(whitespace.WhitespaceCharMatcher.__proto__),
    match: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(whitespace.WhitespaceCharMatcher, I[1]);
  upper_case.UpperCaseLetterCharMatcher = class UpperCaseLetterCharMatcher extends char_matcher.CharMatcher {
    match(value) {
      return 65 <= dart.notNull(value) && dart.notNull(value) <= 90;
    }
  };
  (upper_case.UpperCaseLetterCharMatcher.new = function() {
    upper_case.UpperCaseLetterCharMatcher.__proto__.new.call(this);
    ;
  }).prototype = upper_case.UpperCaseLetterCharMatcher.prototype;
  dart.addTypeTests(upper_case.UpperCaseLetterCharMatcher);
  dart.addTypeCaches(upper_case.UpperCaseLetterCharMatcher);
  dart.setMethodSignature(upper_case.UpperCaseLetterCharMatcher, () => ({
    __proto__: dart.getMethods(upper_case.UpperCaseLetterCharMatcher.__proto__),
    match: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(upper_case.UpperCaseLetterCharMatcher, I[2]);
  pattern$.fromPattern = function fromPattern(pattern) {
    let isNegated = pattern[$startsWith]("^");
    if (isNegated) {
      pattern = pattern[$substring](1);
    }
    let ranges = T.JSArrayOfRangeCharMatcherL().of([]);
    while (pattern[$isNotEmpty]) {
      if (pattern.length >= 3 && pattern[$_get](1) === "-") {
        let charMatcher = new range.RangeCharMatcher.new(pattern[$codeUnitAt](0), pattern[$codeUnitAt](2));
        ranges[$add](charMatcher);
        pattern = pattern[$substring](3);
      } else {
        let charMatcher = new range.RangeCharMatcher.new(pattern[$codeUnitAt](0), pattern[$codeUnitAt](0));
        ranges[$add](charMatcher);
        pattern = pattern[$substring](1);
      }
    }
    let predicate = optimize.optimize(ranges);
    return isNegated ? predicate['~']() : predicate;
  };
  var matcher$ = dart.privateName(negate, "NegateCharMatcher.matcher");
  negate.NegateCharMatcher = class NegateCharMatcher extends char_matcher.CharMatcher {
    get matcher() {
      return this[matcher$];
    }
    set matcher(value) {
      super.matcher = value;
    }
    ['~']() {
      return this.matcher;
    }
    match(value) {
      return !dart.test(this.matcher.match(value));
    }
  };
  (negate.NegateCharMatcher.new = function(matcher) {
    this[matcher$] = matcher;
    negate.NegateCharMatcher.__proto__.new.call(this);
    ;
  }).prototype = negate.NegateCharMatcher.prototype;
  dart.addTypeTests(negate.NegateCharMatcher);
  dart.addTypeCaches(negate.NegateCharMatcher);
  dart.setMethodSignature(negate.NegateCharMatcher, () => ({
    __proto__: dart.getMethods(negate.NegateCharMatcher.__proto__),
    match: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(negate.NegateCharMatcher, I[3]);
  dart.setFieldSignature(negate.NegateCharMatcher, () => ({
    __proto__: dart.getFields(negate.NegateCharMatcher.__proto__),
    matcher: dart.finalFieldType(dart.legacy(char_matcher.CharMatcher))
  }));
  lower_case.LowerCaseLetterCharMatcher = class LowerCaseLetterCharMatcher extends char_matcher.CharMatcher {
    match(value) {
      return 97 <= dart.notNull(value) && dart.notNull(value) <= 122;
    }
  };
  (lower_case.LowerCaseLetterCharMatcher.new = function() {
    lower_case.LowerCaseLetterCharMatcher.__proto__.new.call(this);
    ;
  }).prototype = lower_case.LowerCaseLetterCharMatcher.prototype;
  dart.addTypeTests(lower_case.LowerCaseLetterCharMatcher);
  dart.addTypeCaches(lower_case.LowerCaseLetterCharMatcher);
  dart.setMethodSignature(lower_case.LowerCaseLetterCharMatcher, () => ({
    __proto__: dart.getMethods(lower_case.LowerCaseLetterCharMatcher.__proto__),
    match: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(lower_case.LowerCaseLetterCharMatcher, I[4]);
  letter_or_digit.LetterOrDigitCharMatcher = class LetterOrDigitCharMatcher extends char_matcher.CharMatcher {
    match(value) {
      return 65 <= dart.notNull(value) && dart.notNull(value) <= 90 || 97 <= dart.notNull(value) && dart.notNull(value) <= 122 || 48 <= dart.notNull(value) && dart.notNull(value) <= 57 || value === 95;
    }
  };
  (letter_or_digit.LetterOrDigitCharMatcher.new = function() {
    letter_or_digit.LetterOrDigitCharMatcher.__proto__.new.call(this);
    ;
  }).prototype = letter_or_digit.LetterOrDigitCharMatcher.prototype;
  dart.addTypeTests(letter_or_digit.LetterOrDigitCharMatcher);
  dart.addTypeCaches(letter_or_digit.LetterOrDigitCharMatcher);
  dart.setMethodSignature(letter_or_digit.LetterOrDigitCharMatcher, () => ({
    __proto__: dart.getMethods(letter_or_digit.LetterOrDigitCharMatcher.__proto__),
    match: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(letter_or_digit.LetterOrDigitCharMatcher, I[5]);
  letter.LetterCharMatcher = class LetterCharMatcher extends char_matcher.CharMatcher {
    match(value) {
      return 65 <= dart.notNull(value) && dart.notNull(value) <= 90 || 97 <= dart.notNull(value) && dart.notNull(value) <= 122;
    }
  };
  (letter.LetterCharMatcher.new = function() {
    letter.LetterCharMatcher.__proto__.new.call(this);
    ;
  }).prototype = letter.LetterCharMatcher.prototype;
  dart.addTypeTests(letter.LetterCharMatcher);
  dart.addTypeCaches(letter.LetterCharMatcher);
  dart.setMethodSignature(letter.LetterCharMatcher, () => ({
    __proto__: dart.getMethods(letter.LetterCharMatcher.__proto__),
    match: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(letter.LetterCharMatcher, I[6]);
  var matchers$ = dart.privateName(disjunctive, "DisjunctiveCharMatcher.matchers");
  disjunctive.DisjunctiveCharMatcher = class DisjunctiveCharMatcher extends char_matcher.CharMatcher {
    get matchers() {
      return this[matchers$];
    }
    set matchers(value) {
      super.matchers = value;
    }
    static new(matchers) {
      return new disjunctive.DisjunctiveCharMatcher.__(T.ListOfCharMatcherL().of(matchers, {growable: false}));
    }
    ['|'](other) {
      if (T.AnyCharMatcherL().is(other)) {
        return other;
      } else if (T.NoneCharMatcherL().is(other)) {
        return this;
      } else if (T.DisjunctiveCharMatcherL().is(other)) {
        return disjunctive.DisjunctiveCharMatcher.new((() => {
          let t1 = T.ListOfCharMatcherL().of(this.matchers);
          t1[$addAll](other.matchers);
          return t1;
        })());
      } else {
        return disjunctive.DisjunctiveCharMatcher.new((() => {
          let t2 = T.ListOfCharMatcherL().of(this.matchers);
          t2[$add](other);
          return t2;
        })());
      }
    }
    match(value) {
      return this.matchers[$any](dart.fn(matcher => matcher.match(value), T.CharMatcherLToboolL()));
    }
  };
  (disjunctive.DisjunctiveCharMatcher.__ = function(matchers) {
    this[matchers$] = matchers;
    disjunctive.DisjunctiveCharMatcher.__proto__.new.call(this);
    ;
  }).prototype = disjunctive.DisjunctiveCharMatcher.prototype;
  dart.addTypeTests(disjunctive.DisjunctiveCharMatcher);
  dart.addTypeCaches(disjunctive.DisjunctiveCharMatcher);
  dart.setMethodSignature(disjunctive.DisjunctiveCharMatcher, () => ({
    __proto__: dart.getMethods(disjunctive.DisjunctiveCharMatcher.__proto__),
    match: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(disjunctive.DisjunctiveCharMatcher, I[7]);
  dart.setFieldSignature(disjunctive.DisjunctiveCharMatcher, () => ({
    __proto__: dart.getFields(disjunctive.DisjunctiveCharMatcher.__proto__),
    matchers: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(char_matcher.CharMatcher))))
  }));
  digit.DigitCharMatcher = class DigitCharMatcher extends char_matcher.CharMatcher {
    match(value) {
      return 48 <= dart.notNull(value) && dart.notNull(value) <= 57;
    }
  };
  (digit.DigitCharMatcher.new = function() {
    digit.DigitCharMatcher.__proto__.new.call(this);
    ;
  }).prototype = digit.DigitCharMatcher.prototype;
  dart.addTypeTests(digit.DigitCharMatcher);
  dart.addTypeCaches(digit.DigitCharMatcher);
  dart.setMethodSignature(digit.DigitCharMatcher, () => ({
    __proto__: dart.getMethods(digit.DigitCharMatcher.__proto__),
    match: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(digit.DigitCharMatcher, I[8]);
  var charValue$ = dart.privateName(single, "SingleCharMatcher.charValue");
  single.SingleCharMatcher = class SingleCharMatcher extends char_matcher.CharMatcher {
    get charValue() {
      return this[charValue$];
    }
    set charValue(value) {
      super.charValue = value;
    }
    match(value) {
      return this.charValue == value;
    }
  };
  (single.SingleCharMatcher.new = function(charValue) {
    this[charValue$] = charValue;
    single.SingleCharMatcher.__proto__.new.call(this);
    ;
  }).prototype = single.SingleCharMatcher.prototype;
  dart.addTypeTests(single.SingleCharMatcher);
  dart.addTypeCaches(single.SingleCharMatcher);
  dart.setMethodSignature(single.SingleCharMatcher, () => ({
    __proto__: dart.getMethods(single.SingleCharMatcher.__proto__),
    match: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(single.SingleCharMatcher, I[9]);
  dart.setFieldSignature(single.SingleCharMatcher, () => ({
    __proto__: dart.getFields(single.SingleCharMatcher.__proto__),
    charValue: dart.finalFieldType(dart.legacy(core.int))
  }));
  var length$ = dart.privateName(ranges$, "RangesCharMatcher.length");
  var starts$ = dart.privateName(ranges$, "RangesCharMatcher.starts");
  var stops$ = dart.privateName(ranges$, "RangesCharMatcher.stops");
  ranges$.RangesCharMatcher = class RangesCharMatcher extends char_matcher.CharMatcher {
    get length() {
      return this[length$];
    }
    set length(value) {
      super.length = value;
    }
    get starts() {
      return this[starts$];
    }
    set starts(value) {
      super.starts = value;
    }
    get stops() {
      return this[stops$];
    }
    set stops(value) {
      super.stops = value;
    }
    match(value) {
      let min = 0;
      let max = this.length;
      while (min < dart.notNull(max)) {
        let mid = min + (dart.notNull(max) - min)[$rightShift](1);
        let comp = dart.notNull(this.starts[$_get](mid)) - dart.notNull(value);
        if (comp === 0) {
          return true;
        } else if (comp < 0) {
          min = mid + 1;
        } else {
          max = mid;
        }
      }
      return 0 < min && dart.notNull(value) <= dart.notNull(this.stops[$_get](min - 1));
    }
  };
  (ranges$.RangesCharMatcher.new = function(length, starts, stops) {
    this[length$] = length;
    this[starts$] = starts;
    this[stops$] = stops;
    ranges$.RangesCharMatcher.__proto__.new.call(this);
    ;
  }).prototype = ranges$.RangesCharMatcher.prototype;
  dart.addTypeTests(ranges$.RangesCharMatcher);
  dart.addTypeCaches(ranges$.RangesCharMatcher);
  dart.setMethodSignature(ranges$.RangesCharMatcher, () => ({
    __proto__: dart.getMethods(ranges$.RangesCharMatcher.__proto__),
    match: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(ranges$.RangesCharMatcher, I[10]);
  dart.setFieldSignature(ranges$.RangesCharMatcher, () => ({
    __proto__: dart.getFields(ranges$.RangesCharMatcher.__proto__),
    length: dart.finalFieldType(dart.legacy(core.int)),
    starts: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    stops: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int))))
  }));
  var start$ = dart.privateName(range, "RangeCharMatcher.start");
  var stop$ = dart.privateName(range, "RangeCharMatcher.stop");
  range.RangeCharMatcher = class RangeCharMatcher extends char_matcher.CharMatcher {
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get stop() {
      return this[stop$];
    }
    set stop(value) {
      super.stop = value;
    }
    match(value) {
      return dart.notNull(this.start) <= dart.notNull(value) && dart.notNull(value) <= dart.notNull(this.stop);
    }
  };
  (range.RangeCharMatcher.new = function(start, stop) {
    this[start$] = start;
    this[stop$] = stop;
    range.RangeCharMatcher.__proto__.new.call(this);
    if (dart.notNull(this.start) > dart.notNull(this.stop)) {
      dart.throw(new core.ArgumentError.new("Invalid range: " + dart.str(this.start) + "-" + dart.str(this.stop)));
    }
  }).prototype = range.RangeCharMatcher.prototype;
  dart.addTypeTests(range.RangeCharMatcher);
  dart.addTypeCaches(range.RangeCharMatcher);
  dart.setMethodSignature(range.RangeCharMatcher, () => ({
    __proto__: dart.getMethods(range.RangeCharMatcher.__proto__),
    match: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(range.RangeCharMatcher, I[11]);
  dart.setFieldSignature(range.RangeCharMatcher, () => ({
    __proto__: dart.getFields(range.RangeCharMatcher.__proto__),
    start: dart.finalFieldType(dart.legacy(core.int)),
    stop: dart.finalFieldType(dart.legacy(core.int))
  }));
  var start$0 = dart.privateName(lookup, "LookupCharMatcher.start");
  var stop$0 = dart.privateName(lookup, "LookupCharMatcher.stop");
  var buffer$ = dart.privateName(lookup, "LookupCharMatcher.buffer");
  lookup.LookupCharMatcher = class LookupCharMatcher extends char_matcher.CharMatcher {
    get start() {
      return this[start$0];
    }
    set start(value) {
      super.start = value;
    }
    get stop() {
      return this[stop$0];
    }
    set stop(value) {
      super.stop = value;
    }
    get buffer() {
      return this[buffer$];
    }
    set buffer(value) {
      super.buffer = value;
    }
    match(value) {
      return dart.notNull(this.start) <= dart.notNull(value) && dart.notNull(value) <= dart.notNull(this.stop) && dart.test(this.buffer.getUnchecked(dart.notNull(value) - dart.notNull(this.start)));
    }
  };
  (lookup.LookupCharMatcher.new = function(start, stop, buffer) {
    this[start$0] = start;
    this[stop$0] = stop;
    this[buffer$] = buffer;
    lookup.LookupCharMatcher.__proto__.new.call(this);
    ;
  }).prototype = lookup.LookupCharMatcher.prototype;
  dart.addTypeTests(lookup.LookupCharMatcher);
  dart.addTypeCaches(lookup.LookupCharMatcher);
  dart.setMethodSignature(lookup.LookupCharMatcher, () => ({
    __proto__: dart.getMethods(lookup.LookupCharMatcher.__proto__),
    match: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(lookup.LookupCharMatcher, I[12]);
  dart.setFieldSignature(lookup.LookupCharMatcher, () => ({
    __proto__: dart.getFields(lookup.LookupCharMatcher.__proto__),
    start: dart.finalFieldType(dart.legacy(core.int)),
    stop: dart.finalFieldType(dart.legacy(core.int)),
    buffer: dart.finalFieldType(dart.legacy(bitlist.BitList))
  }));
  optimize.optimize = function optimize$(ranges) {
    let sortedRanges = T.ListOfRangeCharMatcherL().of(ranges, {growable: false});
    sortedRanges[$sort](dart.fn((a, b) => a.start != b.start ? dart.notNull(a.start) - dart.notNull(b.start) : dart.notNull(a.stop) - dart.notNull(b.stop), T.RangeCharMatcherLAndRangeCharMatcherLTointL()));
    let mergedRanges = T.JSArrayOfRangeCharMatcherL().of([]);
    for (let thisRange of sortedRanges) {
      if (dart.test(mergedRanges[$isEmpty])) {
        mergedRanges[$add](thisRange);
      } else {
        let lastRange = mergedRanges[$last];
        if (dart.notNull(lastRange.stop) + 1 >= dart.notNull(thisRange.start)) {
          let charMatcher = new range.RangeCharMatcher.new(lastRange.start, thisRange.stop);
          mergedRanges[$_set](dart.notNull(mergedRanges[$length]) - 1, charMatcher);
        } else {
          mergedRanges[$add](thisRange);
        }
      }
    }
    let matchingCount = mergedRanges[$fold](dart.dynamic, 0, dart.fn((current, range) => dart.dsend(current, '+', [dart.notNull(range.stop) - dart.notNull(range.start) + 1]), T.dynamicAndRangeCharMatcherLTodynamic()));
    if (dart.equals(matchingCount, 0)) {
      return C[1] || CT.C1;
    } else if (dart.equals(dart.dsend(matchingCount, '-', [1]), 65535)) {
      return C[0] || CT.C0;
    } else if (mergedRanges[$length] === 1) {
      if (mergedRanges[$_get](0).start == mergedRanges[$_get](0).stop) {
        return new single.SingleCharMatcher.new(mergedRanges[$_get](0).start);
      } else {
        return mergedRanges[$_get](0);
      }
    } else {
      let rangesSize = 2 * dart.notNull(mergedRanges[$length]);
      let lookupBits = dart.notNull(mergedRanges[$last].stop) - dart.notNull(mergedRanges[$first].start) + 1;
      let lookupSize = (lookupBits + 31)[$rightShift](5);
      if (lookupSize < 255 || lookupSize < rangesSize) {
        let buffer = bitlist.BitList.new(lookupBits);
        for (let mergedRange of mergedRanges) {
          for (let char = mergedRange.start; dart.notNull(char) <= dart.notNull(mergedRange.stop); char = dart.notNull(char) + 1) {
            buffer.setUnchecked(dart.notNull(char) - dart.notNull(mergedRanges[$first].start), true);
          }
        }
        return new lookup.LookupCharMatcher.new(mergedRanges[$first].start, mergedRanges[$last].stop, buffer);
      } else {
        return new ranges$.RangesCharMatcher.new(mergedRanges[$length], mergedRanges[$map](T.intL(), dart.fn(range => range.start, T.RangeCharMatcherLTointL()))[$toList]({growable: false}), mergedRanges[$map](T.intL(), dart.fn(range => range.stop, T.RangeCharMatcherLTointL()))[$toList]({growable: false}));
      }
    }
  };
  char_set.fromCharSet = function fromCharSet(chars) {
    return optimize.optimize(chars[$codeUnits][$map](T.RangeCharMatcherL(), dart.fn(codeUnit => new range.RangeCharMatcher.new(codeUnit, codeUnit), T.intLToRangeCharMatcherL())));
  };
  ascii.AsciiCharMatcher = class AsciiCharMatcher extends char_matcher.CharMatcher {
    match(value) {
      return dart.notNull(value) < 128;
    }
  };
  (ascii.AsciiCharMatcher.new = function() {
    ascii.AsciiCharMatcher.__proto__.new.call(this);
    ;
  }).prototype = ascii.AsciiCharMatcher.prototype;
  dart.addTypeTests(ascii.AsciiCharMatcher);
  dart.addTypeCaches(ascii.AsciiCharMatcher);
  dart.setMethodSignature(ascii.AsciiCharMatcher, () => ({
    __proto__: dart.getMethods(ascii.AsciiCharMatcher.__proto__),
    match: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(ascii.AsciiCharMatcher, I[13]);
  none.NoneCharMatcher = class NoneCharMatcher extends char_matcher.CharMatcher {
    match(value) {
      return false;
    }
    ['~']() {
      return C[0] || CT.C0;
    }
    ['|'](other) {
      return other;
    }
  };
  (none.NoneCharMatcher.new = function() {
    none.NoneCharMatcher.__proto__.new.call(this);
    ;
  }).prototype = none.NoneCharMatcher.prototype;
  dart.addTypeTests(none.NoneCharMatcher);
  dart.addTypeCaches(none.NoneCharMatcher);
  dart.setMethodSignature(none.NoneCharMatcher, () => ({
    __proto__: dart.getMethods(none.NoneCharMatcher.__proto__),
    match: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(none.NoneCharMatcher, I[14]);
  any.AnyCharMatcher = class AnyCharMatcher extends char_matcher.CharMatcher {
    match(value) {
      return true;
    }
    ['~']() {
      return C[1] || CT.C1;
    }
    ['|'](other) {
      return this;
    }
  };
  (any.AnyCharMatcher.new = function() {
    any.AnyCharMatcher.__proto__.new.call(this);
    ;
  }).prototype = any.AnyCharMatcher.prototype;
  dart.addTypeTests(any.AnyCharMatcher);
  dart.addTypeCaches(any.AnyCharMatcher);
  dart.setMethodSignature(any.AnyCharMatcher, () => ({
    __proto__: dart.getMethods(any.AnyCharMatcher.__proto__),
    match: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(any.AnyCharMatcher, I[15]);
  char_matcher._toCharCode = function _toCharCode(char) {
    if (T.numL().is(char)) {
      return char[$round]();
    }
    let value = dart.str(char);
    if (value.length !== 1) {
      dart.throw(new core.ArgumentError.new(value + " is not a character"));
    }
    return value[$codeUnitAt](0);
  };
  dart.trackLibraries("packages/more/src/char_matcher/whitespace.dart", {
    "package:more/src/char_matcher/whitespace.dart": whitespace,
    "package:more/src/char_matcher/upper_case.dart": upper_case,
    "package:more/src/char_matcher/pattern.dart": pattern$,
    "package:more/src/char_matcher/negate.dart": negate,
    "package:more/src/char_matcher/lower_case.dart": lower_case,
    "package:more/src/char_matcher/letter_or_digit.dart": letter_or_digit,
    "package:more/src/char_matcher/letter.dart": letter,
    "package:more/src/char_matcher/disjunctive.dart": disjunctive,
    "package:more/src/char_matcher/digit.dart": digit,
    "package:more/src/char_matcher/single.dart": single,
    "package:more/src/char_matcher/ranges.dart": ranges$,
    "package:more/src/char_matcher/range.dart": range,
    "package:more/src/char_matcher/lookup.dart": lookup,
    "package:more/src/char_matcher/optimize.dart": optimize,
    "package:more/src/char_matcher/char_set.dart": char_set,
    "package:more/src/char_matcher/ascii.dart": ascii,
    "package:more/src/char_matcher/none.dart": none,
    "package:more/src/char_matcher/any.dart": any,
    "package:more/char_matcher.dart": char_matcher
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["../../char_matcher.dart","whitespace.dart","upper_case.dart","pattern.dart","negate.dart","lower_case.dart","letter_or_digit.dart","letter.dart","disjunctive.dart","digit.dart","single.dart","ranges.dart","range.dart","lookup.dart","optimize.dart","char_set.dart","ascii.dart","none.dart","any.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../C:/packages/more/src/char_matcher/whitespace.dart.lib.js"}');
  // Exports:
  return {
    src__char_matcher__whitespace: whitespace,
    src__char_matcher__upper_case: upper_case,
    src__char_matcher__pattern: pattern$,
    src__char_matcher__negate: negate,
    src__char_matcher__lower_case: lower_case,
    src__char_matcher__letter_or_digit: letter_or_digit,
    src__char_matcher__letter: letter,
    src__char_matcher__disjunctive: disjunctive,
    src__char_matcher__digit: digit,
    src__char_matcher__single: single,
    src__char_matcher__ranges: ranges$,
    src__char_matcher__range: range,
    src__char_matcher__lookup: lookup,
    src__char_matcher__optimize: optimize,
    src__char_matcher__char_set: char_set,
    src__char_matcher__ascii: ascii,
    src__char_matcher__none: none,
    src__char_matcher__any: any,
    char_matcher: char_matcher
  };
}));

//# sourceMappingURL=whitespace.dart.lib.js.map
