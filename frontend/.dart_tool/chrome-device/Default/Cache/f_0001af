define(['dart_sdk'], (function load__packages__rational__rational_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var rational = Object.create(dart.library);
  var $substring = dartx.substring;
  var $hashCode = dartx.hashCode;
  var $contains = dartx.contains;
  var $endsWith = dartx.endsWith;
  var $toStringAsExponential = dartx.toStringAsExponential;
  var $padRight = dartx.padRight;
  var $_equals = dartx._equals;
  var $toString = dartx.toString;
  var $compareTo = dartx.compareTo;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    RationalL: () => (T.RationalL = dart.constFn(dart.legacy(rational.Rational)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "file:///D:/Flutter/flutter/.pub-cache/hosted/pub.dartlang.org/rational-0.3.8/lib/rational.dart",
    "package:rational/rational.dart"
  ];
  var numerator$ = dart.privateName(rational, "Rational.numerator");
  var denominator$ = dart.privateName(rational, "Rational.denominator");
  rational.Rational = class Rational extends core.Object {
    get numerator() {
      return this[numerator$];
    }
    set numerator(value) {
      super.numerator = value;
    }
    get denominator() {
      return this[denominator$];
    }
    set denominator(value) {
      super.denominator = value;
    }
    static new(numerator, denominator = null) {
      denominator == null ? denominator = rational._i1 : null;
      if (dart.equals(denominator, rational._i0)) dart.throw(new core.ArgumentError.new());
      if (dart.equals(numerator, rational._i0)) return new rational.Rational._normalized(rational._i0, rational._i1);
      if (dart.test(denominator['<'](rational._i0))) {
        numerator = numerator._negate();
        denominator = denominator._negate();
      }
      let aNumerator = numerator.abs();
      let aDenominator = denominator.abs();
      let gcd = aNumerator.gcd(aDenominator);
      return dart.equals(gcd, rational._i1) ? new rational.Rational._normalized(numerator, denominator) : new rational.Rational._normalized(numerator['~/'](gcd), denominator['~/'](gcd));
    }
    static fromInt(numerator, denominator = 1) {
      return rational.Rational.new(core._BigIntImpl.from(numerator), core._BigIntImpl.from(denominator));
    }
    static parse(decimalValue) {
      let match = rational._pattern.firstMatch(decimalValue);
      if (match == null) {
        dart.throw(new core.FormatException.new(dart.str(decimalValue) + " is not a valid format"));
      }
      let group1 = match.group(1);
      let group2 = match.group(2);
      let group3 = match.group(3);
      let numerator = rational._i0;
      let denominator = rational._i1;
      if (group2 != null) {
        for (let i = 1; i < group2.length; i = i + 1) {
          denominator = denominator['*'](rational._i10);
        }
        numerator = core.BigInt.parse(dart.str(group1) + group2[$substring](1));
      } else {
        numerator = core.BigInt.parse(group1);
      }
      if (group3 != null) {
        let exponent = core.BigInt.parse(group3[$substring](1));
        while (dart.test(exponent['>'](rational._i0))) {
          numerator = numerator['*'](rational._i10);
          exponent = exponent['-'](rational._i1);
        }
        while (dart.test(exponent['<'](rational._i0))) {
          denominator = denominator['*'](rational._i10);
          exponent = exponent['+'](rational._i1);
        }
      }
      return rational.Rational.new(numerator, denominator);
    }
    get isInteger() {
      return dart.equals(this.denominator, rational._i1);
    }
    get inverse() {
      return rational.Rational.new(this.denominator, this.numerator);
    }
    get hashCode() {
      return dart.hashCode(this.numerator['+'](rational._i31['*'](this.denominator)));
    }
    _equals(other) {
      if (other == null) return false;
      return T.RationalL().is(other) && dart.equals(this.numerator, other.numerator) && dart.equals(this.denominator, other.denominator);
    }
    toString() {
      if (dart.equals(this.numerator, rational._i0)) return "0";
      if (dart.test(this.isInteger)) {
        return dart.str(this.numerator);
      } else {
        return dart.str(this.numerator) + "/" + dart.str(this.denominator);
      }
    }
    toDecimalString() {
      if (dart.test(this.isInteger)) return this.toStringAsFixed(0);
      let fractionDigits = dart.test(this.hasFinitePrecision) ? this.scale : 10;
      let asString = this.toStringAsFixed(fractionDigits);
      while (asString[$contains](".") && (asString[$endsWith]("0") || asString[$endsWith]("."))) {
        asString = asString[$substring](0, asString.length - 1);
      }
      return asString;
    }
    compareTo(other) {
      T.RationalL().as(other);
      return this.numerator['*'](other.denominator).compareTo(other.numerator['*'](this.denominator));
    }
    ['+'](other) {
      return rational.Rational.new(this.numerator['*'](other.denominator)['+'](other.numerator['*'](this.denominator)), this.denominator['*'](other.denominator));
    }
    ['-'](other) {
      return rational.Rational.new(this.numerator['*'](other.denominator)['-'](other.numerator['*'](this.denominator)), this.denominator['*'](other.denominator));
    }
    ['*'](other) {
      return rational.Rational.new(this.numerator['*'](other.numerator), this.denominator['*'](other.denominator));
    }
    ['%'](other) {
      let remainder = this.remainder(other);
      if (dart.equals(remainder, rational._r0)) return rational._r0;
      return remainder['+'](dart.test(this.isNegative) ? other.abs() : rational._r0);
    }
    ['/'](other) {
      return rational.Rational.new(this.numerator['*'](other.denominator), this.denominator['*'](other.numerator));
    }
    ['~/'](other) {
      return this['/'](other).truncate();
    }
    _negate() {
      return new rational.Rational._normalized(this.numerator._negate(), this.denominator);
    }
    remainder(other) {
      return this['-'](this['~/'](other)['*'](other));
    }
    ['<'](other) {
      return dart.notNull(this.compareTo(other)) < 0;
    }
    ['<='](other) {
      return dart.notNull(this.compareTo(other)) <= 0;
    }
    ['>'](other) {
      return dart.notNull(this.compareTo(other)) > 0;
    }
    ['>='](other) {
      return dart.notNull(this.compareTo(other)) >= 0;
    }
    get isNaN() {
      return false;
    }
    get isNegative() {
      return this.numerator['<'](rational._i0);
    }
    get isInfinite() {
      return false;
    }
    abs() {
      return dart.test(this.isNegative) ? this._negate() : this;
    }
    get signum() {
      let v = this.compareTo(rational._r0);
      if (dart.notNull(v) < 0) return -1;
      if (dart.notNull(v) > 0) return 1;
      return 0;
    }
    round() {
      let abs = this.abs();
      let absBy10 = abs['*'](rational._r10);
      let r = abs.truncate();
      if (dart.test(absBy10['%'](rational._r10)['>='](rational._r5))) r = r['+'](rational._r1);
      return dart.test(this.isNegative) ? r._negate() : r;
    }
    floor() {
      return dart.test(this.isInteger) ? this.truncate() : dart.test(this.isNegative) ? this.truncate()['-'](rational._r1) : this.truncate();
    }
    ceil() {
      return dart.test(this.isInteger) ? this.truncate() : dart.test(this.isNegative) ? this.truncate() : this.truncate()['+'](rational._r1);
    }
    truncate() {
      return new rational.Rational._normalized(this.numerator['~/'](this.denominator), rational._i1);
    }
    roundToDouble() {
      return this.round().toDouble();
    }
    floorToDouble() {
      return this.floor().toDouble();
    }
    ceilToDouble() {
      return this.ceil().toDouble();
    }
    truncateToDouble() {
      return this.truncate().toDouble();
    }
    clamp(lowerLimit, upperLimit) {
      return dart.test(this['<'](lowerLimit)) ? lowerLimit : dart.test(this['>'](upperLimit)) ? upperLimit : this;
    }
    toInt() {
      return this.toBigInt().toInt();
    }
    toBigInt() {
      return this.numerator['~/'](this.denominator);
    }
    toDouble() {
      return this.numerator['/'](this.denominator);
    }
    get hasFinitePrecision() {
      let den = this.denominator;
      while (dart.equals(den['%'](rational._i5), rational._i0)) {
        den = den['~/'](rational._i5);
      }
      while (dart.equals(den['%'](rational._i2), rational._i0)) {
        den = den['~/'](rational._i2);
      }
      return dart.equals(den, rational._i1);
    }
    get precision() {
      if (!dart.test(this.hasFinitePrecision)) {
        dart.throw(new core.StateError.new("This number has an infinite precision: " + dart.str(this)));
      }
      let x = this.numerator;
      while (!dart.equals(x['%'](this.denominator), rational._i0)) {
        x = x['*'](rational._i10);
      }
      x = x['~/'](this.denominator);
      return dart.toString(x.abs()).length;
    }
    get scale() {
      if (!dart.test(this.hasFinitePrecision)) {
        dart.throw(new core.StateError.new("This number has an infinite precision: " + dart.str(this)));
      }
      let i = 0;
      let x = this.numerator;
      while (!dart.equals(x['%'](this.denominator), rational._i0)) {
        i = i + 1;
        x = x['*'](rational._i10);
      }
      return i;
    }
    toStringAsFixed(fractionDigits) {
      if (fractionDigits === 0) {
        return dart.toString(this.round().toBigInt());
      } else {
        let mul = rational._i1;
        for (let i = 0; i < dart.notNull(fractionDigits); i = i + 1) {
          mul = mul['*'](rational._i10);
        }
        let mulRat = rational.Rational.new(mul);
        let lessThanOne = this.abs()['<'](rational._r1);
        let tmp = (dart.test(lessThanOne) ? this.abs()['+'](rational._r1) : this.abs())['*'](mulRat);
        let tmpRound = tmp.round();
        let intPart = (dart.test(lessThanOne) ? tmpRound['~/'](mulRat)['-'](rational._r1) : tmpRound['~/'](mulRat)).toBigInt();
        let decimalPart = dart.toString(tmpRound.toBigInt())[$substring](dart.toString(intPart).length);
        return (dart.test(this.isNegative) ? "-" : "") + dart.str(intPart) + "." + decimalPart;
      }
    }
    toStringAsExponential(fractionDigits = null) {
      return this.toDouble()[$toStringAsExponential](fractionDigits);
    }
    toStringAsPrecision(precision) {
      if (!(dart.notNull(precision) > 0)) dart.assertFailed(null, I[0], 348, 12, "precision > 0");
      if (this._equals(rational._r0)) {
        return precision === 1 ? "0" : "0."[$padRight](1 + dart.notNull(precision), "0");
      }
      let limit = rational._r1;
      for (let i = 0; i < dart.notNull(precision); i = i + 1) {
        limit = limit['*'](rational._r10);
      }
      let shift = rational._r1;
      let pad = 0;
      while (dart.test(this.abs()['*'](shift)['<'](limit))) {
        pad = pad + 1;
        shift = shift['*'](rational._r10);
      }
      while (dart.test(this.abs()['*'](shift)['>='](limit))) {
        pad = pad - 1;
        shift = shift['/'](rational._r10);
      }
      let value = this['*'](shift).round()['/'](shift);
      return pad <= 0 ? dart.toString(value) : value.toStringAsFixed(pad);
    }
    pow(exponent) {
      return rational.Rational.new(this.numerator.pow(exponent), this.denominator.pow(exponent));
    }
  };
  (rational.Rational._normalized = function(numerator, denominator) {
    this[numerator$] = numerator;
    this[denominator$] = denominator;
    if (!(numerator != null)) dart.assertFailed(null, I[0], 85, 16, "numerator != null");
    if (!(denominator != null)) dart.assertFailed(null, I[0], 86, 16, "denominator != null");
    if (!dart.test(denominator['>'](rational._i0))) dart.assertFailed(null, I[0], 87, 16, "denominator > _i0");
    if (!dart.equals(numerator.abs().gcd(denominator), rational._i1)) dart.assertFailed(null, I[0], 88, 16, "numerator.abs().gcd(denominator) == _i1");
    ;
  }).prototype = rational.Rational.prototype;
  dart.addTypeTests(rational.Rational);
  dart.addTypeCaches(rational.Rational);
  rational.Rational[dart.implements] = () => [core.Comparable$(dart.legacy(rational.Rational))];
  dart.setMethodSignature(rational.Rational, () => ({
    __proto__: dart.getMethods(rational.Rational.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    toDecimalString: dart.fnType(dart.legacy(core.String), []),
    compareTo: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
    [$compareTo]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
    '+': dart.fnType(dart.legacy(rational.Rational), [dart.legacy(rational.Rational)]),
    '-': dart.fnType(dart.legacy(rational.Rational), [dart.legacy(rational.Rational)]),
    '*': dart.fnType(dart.legacy(rational.Rational), [dart.legacy(rational.Rational)]),
    '%': dart.fnType(dart.legacy(rational.Rational), [dart.legacy(rational.Rational)]),
    '/': dart.fnType(dart.legacy(rational.Rational), [dart.legacy(rational.Rational)]),
    '~/': dart.fnType(dart.legacy(rational.Rational), [dart.legacy(rational.Rational)]),
    _negate: dart.fnType(dart.legacy(rational.Rational), []),
    remainder: dart.fnType(dart.legacy(rational.Rational), [dart.legacy(rational.Rational)]),
    '<': dart.fnType(dart.legacy(core.bool), [dart.legacy(rational.Rational)]),
    '<=': dart.fnType(dart.legacy(core.bool), [dart.legacy(rational.Rational)]),
    '>': dart.fnType(dart.legacy(core.bool), [dart.legacy(rational.Rational)]),
    '>=': dart.fnType(dart.legacy(core.bool), [dart.legacy(rational.Rational)]),
    abs: dart.fnType(dart.legacy(rational.Rational), []),
    round: dart.fnType(dart.legacy(rational.Rational), []),
    floor: dart.fnType(dart.legacy(rational.Rational), []),
    ceil: dart.fnType(dart.legacy(rational.Rational), []),
    truncate: dart.fnType(dart.legacy(rational.Rational), []),
    roundToDouble: dart.fnType(dart.legacy(core.double), []),
    floorToDouble: dart.fnType(dart.legacy(core.double), []),
    ceilToDouble: dart.fnType(dart.legacy(core.double), []),
    truncateToDouble: dart.fnType(dart.legacy(core.double), []),
    clamp: dart.fnType(dart.legacy(rational.Rational), [dart.legacy(rational.Rational), dart.legacy(rational.Rational)]),
    toInt: dart.fnType(dart.legacy(core.int), []),
    toBigInt: dart.fnType(dart.legacy(core.BigInt), []),
    toDouble: dart.fnType(dart.legacy(core.double), []),
    toStringAsFixed: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]),
    toStringAsExponential: dart.fnType(dart.legacy(core.String), [], [dart.legacy(core.int)]),
    toStringAsPrecision: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]),
    pow: dart.fnType(dart.legacy(rational.Rational), [dart.legacy(core.int)])
  }));
  dart.setGetterSignature(rational.Rational, () => ({
    __proto__: dart.getGetters(rational.Rational.__proto__),
    isInteger: dart.legacy(core.bool),
    inverse: dart.legacy(rational.Rational),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int),
    isNaN: dart.legacy(core.bool),
    isNegative: dart.legacy(core.bool),
    isInfinite: dart.legacy(core.bool),
    signum: dart.legacy(core.int),
    hasFinitePrecision: dart.legacy(core.bool),
    precision: dart.legacy(core.int),
    scale: dart.legacy(core.int)
  }));
  dart.setLibraryUri(rational.Rational, I[1]);
  dart.setFieldSignature(rational.Rational, () => ({
    __proto__: dart.getFields(rational.Rational.__proto__),
    numerator: dart.finalFieldType(dart.legacy(core.BigInt)),
    denominator: dart.finalFieldType(dart.legacy(core.BigInt))
  }));
  dart.defineExtensionMethods(rational.Rational, ['_equals', 'toString', 'compareTo']);
  dart.defineExtensionAccessors(rational.Rational, ['hashCode']);
  dart.defineLazy(rational.Rational, {
    /*rational.Rational.zero*/get zero() {
      return rational.Rational.fromInt(0);
    },
    /*rational.Rational.one*/get one() {
      return rational.Rational.fromInt(1);
    }
  }, true);
  dart.defineLazy(rational, {
    /*rational._pattern*/get _pattern() {
      return core.RegExp.new("^([+-]?\\d*)(\\.\\d*)?([eE][+-]?\\d+)?$");
    },
    /*rational._r0*/get _r0() {
      return rational.Rational.fromInt(0);
    },
    /*rational._r1*/get _r1() {
      return rational.Rational.fromInt(1);
    },
    /*rational._r5*/get _r5() {
      return rational.Rational.fromInt(5);
    },
    /*rational._r10*/get _r10() {
      return rational.Rational.fromInt(10);
    },
    /*rational._i0*/get _i0() {
      return core.BigInt.zero;
    },
    /*rational._i1*/get _i1() {
      return core.BigInt.one;
    },
    /*rational._i2*/get _i2() {
      return core.BigInt.two;
    },
    /*rational._i5*/get _i5() {
      return core._BigIntImpl.from(5);
    },
    /*rational._i10*/get _i10() {
      return core._BigIntImpl.from(10);
    },
    /*rational._i31*/get _i31() {
      return core._BigIntImpl.from(31);
    }
  }, true);
  dart.trackLibraries("packages/rational/rational.dart", {
    "package:rational/rational.dart": rational
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["rational.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAyFe;;;;;;IAAW;;;;;;eA1DA,WAAmB;AACtB,MAAnB,AAAY,WAAD,WAAX,cAAgB,eAAJ;AACZ,UAAgB,YAAZ,WAAW,EAAI,eAAK,AAAqB,WAAf;AAC9B,UAAc,YAAV,SAAS,EAAI,eAAK,MAAgB,mCAAY,cAAK;AACvD,oBAAI,AAAY,WAAD,MAAG;AACM,QAAtB,YAAY,AAAC,SAAS;AACI,QAA1B,cAAc,AAAC,WAAW;;AAEtB,uBAAa,AAAU,SAAD;AACtB,yBAAe,AAAY,WAAD;AAC1B,gBAAM,AAAW,UAAD,KAAK,YAAY;AACvC,YAAY,aAAJ,GAAG,EAAI,gBACA,kCAAY,SAAS,EAAE,WAAW,IAClC,kCAAY,AAAU,SAAD,OAAI,GAAG,GAAE,AAAY,WAAD,OAAI,GAAG;IACjE;mBAE6B,WAAgB;AACzC,mCAAgB,sBAAK,SAAS,GAAU,sBAAK,WAAW;IAAE;iBAEhC;AACtB,kBAAQ,AAAS,6BAAW,YAAY;AAC9C,UAAI,AAAM,KAAD;AACqD,QAA5D,WAAM,6BAAqD,SAAnC,YAAY;;AAEhC,mBAAS,AAAM,KAAD,OAAO;AACrB,mBAAS,AAAM,KAAD,OAAO;AACrB,mBAAS,AAAM,KAAD,OAAO;AAEvB,sBAAY;AACZ,wBAAc;AAClB,UAAI,MAAM;AACR,iBAAS,IAAI,GAAG,AAAE,CAAD,GAAG,AAAO,MAAD,SAAS,IAAA,AAAC,CAAA;AACF,UAAhC,cAAc,AAAY,WAAD,MAAG;;AAE2B,QAAzD,YAAmB,kBAAqC,SAA7B,MAAM,IAAE,AAAO,MAAD,aAAW;;AAEpB,QAAhC,YAAmB,kBAAM,MAAM;;AAEjC,UAAI,MAAM;AACJ,uBAAkB,kBAAM,AAAO,MAAD,aAAW;AAC7C,yBAAO,AAAS,QAAD,MAAG;AACY,UAA5B,YAAY,AAAU,SAAD,MAAG;AACT,UAAf,WAAA,AAAS,QAAD,MAAI;;AAEd,yBAAO,AAAS,QAAD,MAAG;AACgB,UAAhC,cAAc,AAAY,WAAD,MAAG;AACb,UAAf,WAAA,AAAS,QAAD,MAAI;;;AAGhB,YAAO,uBAAS,SAAS,EAAE,WAAW;IACxC;;AAasB,YAAY,aAAZ,kBAAe;IAAG;;AAEhB,mCAAS,kBAAa;IAAU;;AAGpC,YAAiC,eAAhC,AAAU,oBAAE,AAAK,mBAAE;IAAqB;;UAGrC;AACpB,YAAM,AACuB,kBAD7B,KAAK,KACK,YAAV,gBAAa,AAAM,KAAD,eACN,YAAZ,kBAAe,AAAM,KAAD;IAAY;;AAIlC,UAAc,YAAV,gBAAa,eAAK,MAAO;AAC7B,oBAAI;AACF,cAAmB,UAAV;;AAET,cAAgC,UAAvB,kBAAS,eAAE;;IAExB;;AAGE,oBAAI,iBAAW,MAAO,sBAAgB;AAEhC,qCAAiB,2BAAqB,aAAQ;AAChD,qBAAW,qBAAgB,cAAc;AAC7C,aAAO,AAAS,QAAD,YAAU,SACpB,AAAS,QAAD,YAAU,QAAQ,AAAS,QAAD,YAAU;AACM,QAArD,WAAW,AAAS,QAAD,aAAW,GAAG,AAAS,AAAO,QAAR,UAAU;;AAErD,YAAO,SAAQ;IACjB;;uBAIuB;AACnB,YAAC,AAAU,AAAqB,qBAAnB,AAAM,KAAD,wBAAwB,AAAM,AAAU,KAAX,gBAAa;IAAY;UAI/C;AAAU,mCACnC,AAAU,AAAoB,oBAAlB,AAAM,KAAD,mBAAe,AAAM,AAAU,KAAX,gBAAa,oBAClD,AAAY,sBAAE,AAAM,KAAD;IAAa;UAEP;AAAU,mCACnC,AAAU,AAAoB,oBAAlB,AAAM,KAAD,mBAAe,AAAM,AAAU,KAAX,gBAAa,oBAClD,AAAY,sBAAE,AAAM,KAAD;IAAa;UAEP;AACzB,mCAAS,AAAU,oBAAE,AAAM,KAAD,aAAY,AAAY,sBAAE,AAAM,KAAD;IAAa;UAE7C;AACrB,sBAAY,AAAK,eAAU,KAAK;AACtC,UAAc,YAAV,SAAS,EAAI,eAAK,MAAO;AAC7B,YAAO,AAAU,UAAD,gBAAI,mBAAa,AAAM,KAAD,SAAS;IACjD;UAE6B;AACzB,mCAAS,AAAU,oBAAE,AAAM,KAAD,eAAc,AAAY,sBAAE,AAAM,KAAD;IAAW;WAM5C;AAAU,YAAC,AAAK,AAAS,WAAP,KAAK;IAAY;;AAExC,YAAS,mCAAY,AAAC,0BAAW;IAAY;cAG1C;AAAU,YAAA,AAAK,WAAG,AAAK,AAAU,WAAP,KAAK,OAAI,KAAK;;UAE3C;AAAU,YAAiB,cAAjB,eAAU,KAAK,KAAI;IAAC;WAE7B;AAAU,YAAiB,cAAjB,eAAU,KAAK,MAAK;IAAC;UAEhC;AAAU,YAAiB,cAAjB,eAAU,KAAK,KAAI;IAAC;WAE7B;AAAU,YAAiB,cAAjB,eAAU,KAAK,MAAK;IAAC;;AAEvC;IAAK;;AAEA,YAAA,AAAU,qBAAE;IAAG;;AAEf;IAAK;;AAGV,0CAAc,AAAC,iBAAQ;IAAI;;AAMrC,cAAI,eAAU;AACpB,UAAM,aAAF,CAAC,IAAG,GAAG,MAAO,EAAC;AACnB,UAAM,aAAF,CAAC,IAAG,GAAG,MAAO;AAClB,YAAO;IACT;;AAOQ,gBAAM,AAAK;AACX,oBAAU,AAAI,GAAD,MAAG;AAClB,cAAI,AAAI,GAAD;AACX,oBAAI,AAAQ,AAAO,OAAR,MAAG,qBAAQ,gBAAK,AAAQ,IAAR,AAAE,CAAD,MAAI;AAChC,uBAAO,mBAAa,AAAC,CAAC,aAAG,CAAC;IAC5B;;AAII,yCAAY,4BAAa,mBAAc,AAAW,qBAAE,gBAAO;IAAU;;AAIrE,yCAAY,4BAAa,mBAAa,kBAAc,AAAW,qBAAE;IAAI;;AAIlD,YAAS,mCAAY,AAAU,qBAAG,mBAAa;IAAI;;AAQhD,YAAA,AAAQ;IAAU;;AAKlB,YAAA,AAAQ;IAAU;;AAKnB,YAAA,AAAO;IAAU;;AAMb,YAAA,AAAW;IAAU;UAK1B,YAAqB;AACzC,uBAAA,AAAK,UAAE,UAAU,KAAG,UAAU,aAAG,AAAK,UAAE,UAAU,KAAG,UAAU,GAAG;IAAI;;AAG3D,YAAA,AAAW;IAAO;;AAIZ,YAAA,AAAU,sBAAG;IAAW;;AAOxB,YAAA,AAAU,qBAAE;IAAW;;AAKtC,gBAAM;AACV,aAAiB,YAAV,AAAI,GAAD,MAAG,eAAO;AACF,QAAhB,MAAM,AAAI,GAAD,OAAI;;AAEf,aAAiB,YAAV,AAAI,GAAD,MAAG,eAAO;AACF,QAAhB,MAAM,AAAI,GAAD,OAAI;;AAEf,YAAW,aAAJ,GAAG,EAAI;IAChB;;AAWE,qBAAK;AAC6D,QAAhE,WAAM,wBAAW,AAA8C,qDAAL;;AAExD,cAAI;AACR,0BAAO,AAAE,CAAD,MAAG,mBAAe;AACf,QAAT,IAAA,AAAE,CAAD,MAAI;;AAEa,MAApB,IAAI,AAAE,CAAD,OAAI;AACT,YAAe,AAAW,eAAnB,AAAE,CAAD;IACV;;AAWE,qBAAK;AAC6D,QAAhE,WAAM,wBAAW,AAA8C,qDAAL;;AAExD,cAAI;AACJ,cAAI;AACR,0BAAO,AAAE,CAAD,MAAG,mBAAe;AACrB,QAAH,IAAA,AAAC,CAAA;AACQ,QAAT,IAAA,AAAE,CAAD,MAAI;;AAEP,YAAO,EAAC;IACV;oBAI2B;AACzB,UAAI,AAAe,cAAD,KAAI;AACpB,cAA0B,eAAnB,AAAQ;;AAEX,kBAAM;AACV,iBAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,cAAc,GAAE,IAAA,AAAC,CAAA;AACxB,UAAX,MAAA,AAAI,GAAD,MAAI;;AAEH,qBAAS,sBAAS,GAAG;AACrB,0BAAc,AAAM,gBAAE;AACtB,kBAA4C,WAArC,WAAW,IAAI,AAAM,gBAAE,gBAAO,iBAAS,MAAM;AACpD,uBAAW,AAAI,GAAD;AACd,sBAEG,WADJ,WAAW,IAAK,AAAS,AAAW,QAAZ,OAAI,MAAM,OAAI,gBAAQ,AAAS,QAAD,OAAI,MAAM;AAE/D,0BACkB,AAAW,cAA/B,AAAS,QAAD,yBAAyC,AAAW,cAAnB,OAAO;AACpD,cAAsD,YAA5C,mBAAa,MAAM,eAAI,OAAO,UAAE,WAAW;;IAEzD;0BAIkC;AAC9B,YAAA,AAAW,yCAAsB,cAAc;IAAC;wBAIrB;AAC7B,YAAiB,aAAV,SAAS,IAAG;AAEnB,UAAI,AAAK,aAAG;AACV,cAAO,AAAU,UAAD,KAAI,IAAI,MAAM,AAAK,gBAAS,AAAE,iBAAE,SAAS,GAAE;;AAGzD,kBAAQ;AACZ,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,SAAS,GAAE,IAAA,AAAC,CAAA;AACjB,QAAb,QAAA,AAAM,KAAD,MAAI;;AAGP,kBAAQ;AACR,gBAAM;AACV,uBAAO,AAAM,AAAQ,gBAAN,KAAK,OAAG,KAAK;AACrB,QAAL,MAAA,AAAG,GAAA;AACU,QAAb,QAAA,AAAM,KAAD,MAAI;;AAEX,uBAAO,AAAM,AAAQ,gBAAN,KAAK,QAAI,KAAK;AACtB,QAAL,MAAA,AAAG,GAAA;AACU,QAAb,QAAA,AAAM,KAAD,MAAI;;AAEL,kBAAS,AAAK,AAAS,AAAQ,UAAf,KAAK,eAAY,KAAK;AAC5C,YAAO,AAAI,IAAD,IAAI,IAAU,cAAN,KAAK,IAAc,AAAM,KAAD,iBAAiB,GAAG;IAChE;QAOiB;AACb,mCAAS,AAAU,mBAAI,QAAQ,GAAG,AAAY,qBAAI,QAAQ;IAAE;;4CAvStC,WAAgB;IAAhB;IAAgB;UAC7B,AAAU,SAAD;UACT,AAAY,WAAD;mBACX,AAAY,WAAD,MAAG;SACmB,YAAjC,AAAU,AAAM,SAAP,WAAW,WAAW,GAAK;;EAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAIxC,sBAAI;YAAY,2BAAQ;;MACxB,qBAAG;YAAY,2BAAQ;;;;MA5EhC,iBAAQ;YAAG,iBAAO;;MAElB,YAAG;YAAY,2BAAQ;;MACvB,YAAG;YAAY,2BAAQ;;MACvB,YAAG;YAAY,2BAAQ;;MACvB,aAAI;YAAY,2BAAQ;;MAExB,YAAG;YAAU;;MACb,YAAG;YAAU;;MACb,YAAG;YAAU;;MACb,YAAG;YAAU,uBAAK;;MAClB,aAAI;YAAU,uBAAK;;MACnB,aAAI;YAAU,uBAAK","file":"../../../../../../../../C:/packages/rational/rational.dart.lib.js"}');
  // Exports:
  return {
    rational: rational
  };
}));

//# sourceMappingURL=rational.dart.lib.js.map
